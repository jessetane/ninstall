#!/usr/bin/env bash
#
# ninstall
#

# chdir
cd "$(dirname "$BASH_SOURCE")"

# exit on errors and clean up
set -e
trap '[ -n "$tmpdir" ] && rm -rf "$tmpdir"' EXIT

# vars
version="$1"
joyent="$JOYENT"
prefix="${PREFIX-"/usr/local"}"
cachedir="$prefix/lib/ninstall"

# joyent or iojs?
if [ -n "$joyent" ]; then
  url="https://nodejs.org/dist"
  name="node"
else
  url="https://iojs.org/dist"
  name="iojs"
fi

# if version was not spec'd pick latest
if [ -z "$version" ]; then
  selection="latest"
fi

# match version exactly if two dots are present
if echo "$version" | grep -Eq '[^.]+\.[^.]+\.[^.]+'; then
  matcher="^$version$"
else
  matcher="^$version"
fi

# find best matching version
while read line; do
  line=($line)
  if [ "$selection" = "latest" ]; then
    selection="${line[0]}"
    versionurl="${line[1]}"
    break
  elif echo "${line[0]}" | grep -Eq "$matcher"; then
    selection="${line[0]}"
    versionurl="${line[1]}"
    break
  fi
done < <(curl -sL "$url/"\
         | grep -E '<a href="v'\
         | sed 's/.*href="\(.*\)">[^v]*v\([.0-9]*\).*/\2 \1/'\
         | sort -nr -t. -k1,1 -k2,2 -k3,3)

# make sure we found a valid version
if [ -z "$selection" ]; then
  echo "no matching version found" >&2
  exit 1
else
  version="$selection"
fi

# platform
case "$(uname)" in
  "Darwin") platform="darwin";;
  "Linux") platform="linux";;
esac

if [ -z "$platform" ]; then
  echo "unsupported platform" >&2
  exit 1
fi

# architecture
case "$(uname -m)" in
  "x86_64") arch="x64";;
  "x86 ") arch="x86";;
esac

if [ -z "$arch" ]; then
  echo "unsupported architecture" >&2
  exit 1
fi

# attempt download
file="$name-v$version-$platform-$arch.tar.gz"
while ! tmpdir="$(mktemp -d "/tmp/n2-XXXXX")"; do :; done

# if we don't have the required version in the cache, attempt to download it
if [ ! -f "$cachedir/$file" ]; then
  download="$url/$versionurl/$file"
  if ! curl -fL# "$download" > "$tmpdir/$file"; then
    echo "failed to download $download" >&2
    exit 1
  else
    mkdir -p "$cachedir"
    mv "$tmpdir/$file" "$cachedir/$file"
  fi
fi

# unarchive
tar xf "$cachedir/$file" - -C "$tmpdir" --strip-components 1 2> /dev/null

# not bullet-proof, but delete some things we know might not be overidden
rm -rf "$prefix"/include/node
rm "$prefix"/bin/iojs &> /dev/null || :;

# delete any loose files from the download
rm "$tmpdir/"* &> /dev/null || :;

# install
cp -fR "$tmpdir/"* "$prefix"
