#!/usr/bin/env bash
#
# ninstall
#

# exit on errors
set -e

# clean up on exit
trap '[ -n "$tmpdir" ] && rm -rf "$tmpdir"' EXIT

# vars
version="$1"
installdir="${PREFIX-"/usr/local"}"
scriptdir="$(dirname "$BASH_SOURCE")"
cachedir="$scriptdir/../lib/ninstall"

# platform
case "$(uname)" in
  "Linux") platform="linux";;
  "Darwin") platform="darwin";;
  *)
    echo "unsupported platform" >&2
    exit 1
  ;;
esac

# architecture
case "$(uname -m)" in
  "x86_64") arch="x64";;
  "x86 ") arch="x86";;
  *)
    echo "unsupported architecture" >&2
    exit 1
  ;;
esac

# iojs vs node
if [ -n "$version" ] && echo "$version" | grep -Eq "^0"; then
  url="https://nodejs.org/dist"
  name="node"
else
  url="https://iojs.org/dist"
  name="iojs"
fi

# ensure working dirs
while ! tmpdir="$(mktemp -d "/tmp/ninstall-XXX")"; do :; done
mkdir -p "$cachedir" "$tmpdir"

# if the version has two dots and three numbers 
# it's exact, so we can assume an archive name
if echo "$version" | grep -Eq '[0-9]+\.[0-9]+\.[0-9]+'; then
  archive="$name-v$version-$platform-$arch.tar.gz"
fi

# check cache
if [ -z "$archive" ] || [ ! -f "$cachedir/$archive" ]; then

  # nope, let's ask the internets...
  if [ -n "$version" ]; then
    regex="$(echo "$version" | sed s/[.]/\\\\./g)"
    if [ -n "$archive" ]; then
      regex="^$regex$"
    else
      regex="^$regex"
    fi
    unset version
  fi

  while read line; do
    line=($line)
    if [ -z "$regex" ] || echo "${line[0]}" | grep -Eq "$regex"; then
      version="${line[0]}"
      urlpath="${line[1]}"
      break
    fi
  done < <(curl -sL "$url/"\
         | grep -E '<a href="v'\
         | sed 's/.*href="\(.*\)">[^v]*v\([.0-9]*\).*/\2 \1/'\
         | sort -nr -t. -k1,1 -k2,2 -k3,3)

  if [ -z "$version" ]; then
    echo "no matching version found" >&2
    exit 1
  fi

  archive="$name-v$version-$platform-$arch.tar.gz"
  download="$url/$urlpath/$archive"

  # check cache again
  if [ ! -f "$cachedir/$archive" ]; then

    # nope, download it
    if ! curl -fL# "$download" > "$tmpdir/$archive"; then
      echo "failed to download $download" >&2
      exit 1
    fi

    # cache it
    mv "$tmpdir/$archive" "$cachedir/$archive"
  fi
fi

# unarchive
tar xf "$cachedir/$archive" -C "$tmpdir" --strip-components 1 2> /dev/null

# remove anything that might not get overidden
rm -rf "$installdir"/include/node
rm "$installdir"/bin/{iojs,node-waf} &> /dev/null || :;

# delete license, changelog etc
rm "$tmpdir/"* &> /dev/null || :;

# install
rsync -a "$tmpdir/"* "$installdir"
